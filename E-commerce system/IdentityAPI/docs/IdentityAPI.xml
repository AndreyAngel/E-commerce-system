<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdentityAPI</name>
    </assembly>
    <members>
        <member name="T:IdentityAPI.Controllers.UserController">
            <summary>
            Provides the APIs for handling all the user logic
            </summary>
        </member>
        <member name="F:IdentityAPI.Controllers.UserController._userService">
            <summary>
            Object of class <see cref="T:IdentityAPI.Services.IUserService"/> providing the APIs for managing user in a persistence store.
            </summary>
        </member>
        <member name="F:IdentityAPI.Controllers.UserController._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.#ctor(IdentityAPI.Services.IUserService,AutoMapper.IMapper)">
            <summary>
            Creates an instance of the <see cref="T:IdentityAPI.Controllers.UserController"/>.
            </summary>
            <param name="userService"> Object of class providing the APIs for managing user in a persistence store. </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.GetById(System.Guid)">
            <summary>
            Get the user information by Id
            </summary>
            <param name="userId"> User Id </param>
            <returns> The task object containing the action result of getting user information </returns>
            <response code="200"> Successful completion </response>
            <response code="404"> User with this Id wasn't founded </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.GetYourUserData">
            <summary>
            Get your user information by access token from headers
            </summary>
            <returns> The task object containing the action result of getting user information </returns>
            <response code="200"> Successful completion </response>
            <response code="404"> User with this Id from the access token wasn't founded </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.GetAccessToken(IdentityAPI.Models.DTO.GetAccessTokenDTORequest)">
            <summary>
            Get new access token with refresh token
            </summary>
            <param name="model"> Model of request for get access token </param>
            <returns> The task object containing the action result of get access token </returns>
            <response code="200"> Successful completion </response>
            <response code="403"> Insecure request </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.Register(IdentityAPI.Models.DTO.RegisterDTORequest)">
            <summary>
            Registration of the new user
            </summary>
            <param name="model"> Registration DTO </param>
            <returns> The task object containing the authorization result </returns>
            <response code="201"> User registrated </response>
            <response code="400"> Incorrect data was sent during registration </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.Login(IdentityAPI.Models.DTO.LoginDTORequest)">
            <summary>
            Authorization of the user
            </summary>
            <param name="model"> Login DTO </param>
            <returns> The task object containing the authorization result </returns>
            <response code="200"> Successful completion </response>
            <response code="404"> Incorrect data was sent during authorization </response>
            <response code="401"> Incorrect password </response>
            <response code="403"> Already authorized </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.Logout">
            <summary>
            Logout from account
            </summary>
            <returns> The task object </returns>
            <response code="200"> Successful completion </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:IdentityAPI.Controllers.UserController.Update(IdentityAPI.Models.DTO.UserDTORequest,System.Guid)">
            <summary>
             Update of user date
             </summary>
             <param name="model"> User data DTO </param>
             <param name="userId"> User Id </param>
             <returns> Task object contaning request result </returns>
             <response code="204"> Successful completion </response>
             <response code="400"> Bad request </response>
             <response code="401"> Unauthorized </response>
        </member>
        <member name="T:IdentityAPI.Exceptions.IncorrectPasswordException">
            <summary>
            The exception that is throw when a incorrect password error is detected
            </summary>
        </member>
        <member name="T:IdentityAPI.Helpers.AuthorizeHandler">
            <summary>
            Class for authorization handlers that need to be called for a specific requirement type
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.AuthorizeHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement)">
            <inheritdoc/>
        </member>
        <member name="T:IdentityAPI.Helpers.CustomAuthenticateMiddleware">
            <summary>
            Middleware adding user in context items
            </summary>
        </member>
        <member name="F:IdentityAPI.Helpers.CustomAuthenticateMiddleware._next">
            <summary>
            Request delegate
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.CustomAuthenticateMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:IdentityAPI.Helpers.CustomAuthenticateMiddleware"/>.
            </summary>
            <param name="next">The next item in the middleware pipeline.</param>
        </member>
        <member name="M:IdentityAPI.Helpers.CustomAuthenticateMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,IdentityAPI.Services.IUserService)">
            <summary>
            Invokes the middleware performing authentication.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <param name="userService">The <see cref="T:IdentityAPI.Services.IUserService"/>.</param>
        </member>
        <member name="T:IdentityAPI.Helpers.EnumTypesSchemaFilter">
            <summary>
            Class used for auto-documentation of enums
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.EnumTypesSchemaFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:IdentityAPI.Helpers.EnumTypesSchemaFilter"/>.
            </summary>
            <param name="xmlPath"></param>
        </member>
        <member name="M:IdentityAPI.Helpers.EnumTypesSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <inheritdoc/>
        </member>
        <member name="T:IdentityAPI.Helpers.JwtTokenHelper">
            <summary>
            Class for working with JWT tokens
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.JwtTokenHelper.GenerateJwtRefreshToken(Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            Generate of the JWT refresh token
            </summary>
            <param name="configuration"> Configurations of application </param>
            <param name="claims"> User claims </param>
            <returns> A string containing the JWT refresh token </returns>
        </member>
        <member name="M:IdentityAPI.Helpers.JwtTokenHelper.GenerateJwtAccessToken(Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            Generate of the JWT access token
            </summary>
            <param name="configuration"> Configurations of application </param>
            <param name="claims"> User claims </param>
            <returns> A string containing the JWT access token </returns>
        </member>
        <member name="M:IdentityAPI.Helpers.JwtTokenHelper.ValidateToken(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Validate of token
            </summary>
            <param name="configuration"> Configurations of application </param>
            <param name="token"> Token to verify </param>
            <returns> Validated token </returns>
        </member>
        <member name="M:IdentityAPI.Helpers.JwtTokenHelper.GenerateJwtToken(Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.List{System.Security.Claims.Claim},IdentityAPI.Models.Enums.TokenType)">
            <summary>
            Generate JWT token
            </summary>
            <param name="configuration"> Configurations of application </param>
            <param name="claims"> User claims </param>
            <param name="tokenType"> Token type </param>
            <returns> JWT token </returns>
        </member>
        <member name="T:IdentityAPI.Helpers.LoginAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to don't requires the specified authorization
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.LoginAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <inheritdoc/>
        </member>
        <member name="T:IdentityAPI.Helpers.MappingProfile">
            <summary>
            Class for models mapping
            </summary>
        </member>
        <member name="M:IdentityAPI.Helpers.MappingProfile.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:IdentityAPI.Helpers.MappingProfile"/>.
            </summary>
        </member>
        <member name="T:IdentityAPI.Migrations.Initial">
            <inheritdoc />
        </member>
        <member name="M:IdentityAPI.Migrations.Initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IdentityAPI.Migrations.Initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:IdentityAPI.Migrations.Initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:IdentityAPI.Models.DataBase.Context">
            <summary>
            Class for the Entity Framework database context used for identity
            </summary>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.Context.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{IdentityAPI.Models.DataBase.Context})">
            <summary>
            Creates an instance of the <see cref="T:IdentityAPI.Models.DataBase.Context"/>.
            </summary>
            <param name="options"> <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> </param>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Context.Addresses">
            <summary>
            Addresses DataBase set
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Context.Tokens">
            <summary>
            Tokens DataBase set
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DataBase.CustomUserStore">
            <summary>
            Represents a new instance of a persistence store for users, using the default implementation
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.DataBase.CustomUserStore._context">
            <summary>
            Database context
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.CustomUserStore.Context">
            <summary>
            Gets database context
            </summary>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.#ctor(IdentityAPI.Models.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:IdentityAPI.Models.DataBase.CustomUserStore"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.AddRangeTokenAsync(System.Collections.Generic.IEnumerable{IdentityAPI.Models.DataBase.Entities.Token})">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.BlockTokens(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.GetTokensByUserId(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.CustomUserStore.FindUserAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:IdentityAPI.Models.DataBase.Entities.Address">
            <summary>
            Entity storing address data
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.Id">
            <summary>
            Gets or sets a Id
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.City">
            <summary>
            Gets or set a city
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.Street">
            <summary>
            Gets or sets a street
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.NumberOfHome">
            <summary>
            Gets or sets a number of home
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.ApartmentNumber">
            <summary>
            Gets or sets a apartment number
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Address.PostalCode">
            <summary>
            Gets or sets a postal code
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DataBase.Entities.Token">
            <summary>
            Entity storing token information
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Token.Id">
            <summary>
            Gets or set a Id
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Token.UserId">
            <summary>
            Gets or set a Id of user using this token
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Token.TokenType">
            <summary>
            Gets or set a token type: Access token or Refresh token
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Token.Value">
            <summary>
            Gets or set a token value
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.Token.IsActive">
            <summary>
            Gets or set a token status:
            true, if active
            false, if not active
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DataBase.Entities.User">
            <summary>
            Entity storing user data
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.Name">
            <summary>
            Gets or sets a name
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.Surname">
            <summary>
            Gets or sets a surname
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.BirthDate">
            <summary>
            Gets or sets a birth date
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.AddressId">
            <summary>
            Gets or sets a address Id
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.Address">
            <summary>
            Gets or sets a address
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.Entities.User.RegistrationDate">
            <summary>
            Gets a registration date
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DataBase.ICustomUserStore">
            <summary>
            Provides an abstraction for a store which manages user accounts
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DataBase.ICustomUserStore.Context">
            <summary>
            Gets database context
            </summary>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.ICustomUserStore.AddRangeTokenAsync(System.Collections.Generic.IEnumerable{IdentityAPI.Models.DataBase.Entities.Token})">
            <summary>
            Adds tokens <see cref="T:System.Collections.Generic.IEnumerable`1"/> in database context
            </summary>
            <param name="tokens"> Tokens </param>
            <returns> Task object </returns>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.ICustomUserStore.BlockTokens(System.Guid)">
            <summary>
            Blocks tokens: Field "IsActive" = false
            </summary>
            <param name="userId"> User Id </param>
            <returns> Task object </returns>
        </member>
        <member name="M:IdentityAPI.Models.DataBase.ICustomUserStore.GetTokensByUserId(System.Guid)">
            <summary>
            Gets access token and refresh token by user Id
            </summary>
            <param name="userId"> User Id </param>
            <returns> Task object </returns>
        </member>
        <member name="T:IdentityAPI.Models.DTO.AddressDTO">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AddressDTO.City">
            <summary>
            Gets or sets a city
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AddressDTO.Street">
            <summary>
            Gets or sets a street
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AddressDTO.NumberOfHome">
            <summary>
            Gets or sets a number of home
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AddressDTO.ApartmentNumber">
            <summary>
            Gets or sets a apartment number
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AddressDTO.PostalCode">
            <summary>
            Gets or sets a postal code
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.GetAccessTokenDTORequest">
            <summary>
            Model of request for get access token
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.GetAccessTokenDTORequest.RefreshToken">
            <summary>
            Gets or sets a refresh token
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.LoginDTORequest">
            <summary>
            Login view model
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.LoginDTORequest.Email">
            <summary>
            Gets or sets a Email
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.LoginDTORequest.Password">
            <summary>
            Gets or sets a password
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.RegisterDTORequest">
            <summary>
            Registration view model
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.RegisterDTORequest.Email">
            <summary>
            Gets or sets a Email
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.RegisterDTORequest.BirthDate">
            <summary>
            Gets or sets a BirthDate
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.RegisterDTORequest.Password">
            <summary>
            Gets or sets a password
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.RegisterDTORequest.PasswordConfirm">
            <summary>
            Gets or sets a password confirm
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.RegisterDTORequest.Role">
            <summary>
            Gets or sets a role
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.UserDTORequest">
            <summary>
            View model for update user data
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTORequest.Name">
            <summary>
            Gets or sets a name
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTORequest.Surname">
            <summary>
            Gets or sets a surname
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTORequest.BirthDate">
            <summary>
            Gets or sets a BirthDate
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTORequest.Address">
            <summary>
            Gets or sets a address
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.AuthorizationDTOResponse">
            <summary>
            The view model of the response containing the access token and refresh token
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AuthorizationDTOResponse.ExpiresIn">
            <summary>
            Gets or sets a access token lifetime in seconds
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AuthorizationDTOResponse.TokenType">
            <summary>
            Gets or sets a access token type
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AuthorizationDTOResponse.AccessToken">
            <summary>
            Gets or sets a access token
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.AuthorizationDTOResponse.RefreshToken">
            <summary>
            Gets or sets a refresh token
            </summary>
        </member>
        <member name="M:IdentityAPI.Models.DTO.AuthorizationDTOResponse.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:IdentityAPI.Models.DTO.AuthorizationDTOResponse"/>.
            </summary>
            <param name="expiresIn"> Access token lifetime in seconds </param>
            <param name="accessToken"> Access token </param>
            <param name="refreshToken"> Refresh token </param>
            <param name="tokenType"> Refresh token </param>
        </member>
        <member name="T:IdentityAPI.Models.DTO.IdentityErrorsDTOResponse">
            <summary>
            The view model of the response containing the identity errors
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.IdentityErrorsDTOResponse.Errors">
            <summary>
            Gets or sets a identity errors list
            </summary>
        </member>
        <member name="M:IdentityAPI.Models.DTO.IdentityErrorsDTOResponse.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IdentityError})">
            <summary>
            Creates an instance of the <see cref="T:IdentityAPI.Models.DTO.IdentityErrorsDTOResponse"/>.
            </summary>
            <param name="errors"> Identity errors list </param>
        </member>
        <member name="T:IdentityAPI.Models.DTO.IIdentityDTOResponse">
            <summary>
            Identity response interface
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.DTO.UserDTOResponse">
            <summary>
            The view model of the response containing the user data
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.Id">
            <summary>
            Gets or sets a Id
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.Email">
            <summary>
            Gets or sets a Email
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.PhoneNumber">
            <summary>
            Gets or sets a phone number
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.Name">
            <summary>
            Gets or sets a name
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.Surname">
            <summary>
            Gets or sets a surname
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.BirthDate">
            <summary>
            Gets or sets a BirthDate
            </summary>
        </member>
        <member name="P:IdentityAPI.Models.DTO.UserDTOResponse.Address">
            <summary>
            Gets or sets a address
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.Enums.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.Role.Admin">
            <summary>
            Administrator
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.Role.Buyer">
            <summary>
            Buyer
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.Role.Salesman">
            <summary>
            Salesman
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.Role.Courier">
            <summary>
            Courier
            </summary>
        </member>
        <member name="T:IdentityAPI.Models.Enums.TokenType">
            <summary>
            Token type
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.TokenType.Refresh">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="F:IdentityAPI.Models.Enums.TokenType.Access">
            <summary>
            Access token
            </summary>
        </member>
        <member name="T:IdentityAPI.Services.IUserService">
            <summary>
            Interface for class providing the APIs for managing user in a persistence store.
            </summary>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.GetById(System.Guid)">
            <summary>
            Gets the user by Id
            </summary>
            <param name="id"> The user Id </param>
            <returns> The task object containing the action result of getting user information </returns>
            <exception cref="!:NotFoundException"> User with this Id wasn't founded </exception>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.GetAccessToken(System.String)">
            <summary>
            Get new access token with refresh token
            </summary>
            <param name="refreshToken"> refresh token </param>
            <returns> The task object containing the action result of get access token </returns>
            <exception cref="T:System.Security.SecurityException"> Incorrect refreshToken </exception>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.Register(IdentityAPI.Models.DataBase.Entities.User,System.String,IdentityAPI.Models.Enums.Role)">
            <summary>
            Registration of the new user
            </summary>
            <param name="user"> Object of the user </param>
            <param name="Password"> User password </param>
            <param name="role"> User role </param>
            <returns> The task object containing the authorization result </returns>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.Login(IdentityAPI.Models.DTO.LoginDTORequest)">
            <summary>
            Authorization of the user
            </summary>
            <param name="model"> Login view model </param>
            <returns> The task object containing the authorization result </returns>
            <exception cref="!:NotFoundException"> User with this Email wasn't founded </exception>
            <exception cref="T:IdentityAPI.Exceptions.IncorrectPasswordException"> Incorrect password </exception>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.Logout(System.Guid)">
            <summary>
            Logout from account
            </summary>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.TokensIsActive(System.Guid)">
            <summary>
            Checks tokens
            If true, token is active
            If false, token isn't active
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityAPI.Services.IUserService.Update(IdentityAPI.Models.DataBase.Entities.User,System.Guid)">
            <summary>
            Update of user date
            </summary>
            <param name="user"> User </param>
            <param name="userId"> User Id </param>
            <returns> Task object </returns>
            <exception cref="!:NotFoundException"> User with this Id wasn't founded </exception>
        </member>
        <member name="T:IdentityAPI.Services.UserService">
            <summary>
            Provides the APIs for managing user in a persistence store.
            </summary>
        </member>
        <member name="F:IdentityAPI.Services.UserService._configuration">
            <summary>
            Configurations of application
            </summary>
        </member>
        <member name="F:IdentityAPI.Services.UserService._bus">
            <summary>
            <see cref="T:MassTransit.IBusControl"/>.
            </summary>
        </member>
        <member name="P:IdentityAPI.Services.UserService.Store">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,MassTransit.IBusControl,IdentityAPI.Models.DataBase.ICustomUserStore,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{IdentityAPI.Models.DataBase.Entities.User},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{IdentityAPI.Models.DataBase.Entities.User}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{IdentityAPI.Models.DataBase.Entities.User}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{IdentityAPI.Models.DataBase.Entities.User}})">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/>.
            </summary>
            <param name="configuration"> Configurations of application </param>
            <param name="bus"></param>
            <param name="store">The persistence store the manager will operate over.</param>
            <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions"/>.</param>
            <param name="passwordHasher">The password hashing implementation to use when saving passwords.</param>
            <param name="userValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1"/> to validate users against.</param>
            <param name="passwordValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1"/> to validate passwords against.</param>
            <param name="keyNormalizer">The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer"/> to use when generating index keys for users.</param>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> used to resolve services.</param>
            <param name="logger">The logger used to log messages, warnings and errors.</param>
        </member>
        <member name="M:IdentityAPI.Services.UserService.GetById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.Login(IdentityAPI.Models.DTO.LoginDTORequest)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.Register(IdentityAPI.Models.DataBase.Entities.User,System.String,IdentityAPI.Models.Enums.Role)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.GetAccessToken(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.Logout(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.TokensIsActive(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.Update(IdentityAPI.Models.DataBase.Entities.User,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.CreateCart(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.Login(IdentityAPI.Models.DataBase.Entities.User,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IdentityAPI.Services.UserService.GenerateTokens(System.Guid,System.String,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
    </members>
</doc>
