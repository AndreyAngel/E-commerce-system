<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrderAPI</name>
    </assembly>
    <members>
        <member name="T:OrderAPI.Consumers.CreateCartConsumer">
            <summary>
            Consumer of the message for create cart
            </summary>
        </member>
        <member name="F:OrderAPI.Consumers.CreateCartConsumer._cartService">
            <summary>
            Interface for class providing the APIs for managing cart in a persistence store.
            </summary>
        </member>
        <member name="M:OrderAPI.Consumers.CreateCartConsumer.#ctor(OrderAPI.Services.Interfaces.ICartService)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Consumers.CreateCartConsumer"/>.
            </summary>
            <param name="cartService"> Interface for class providing the APIs for managing cart in a persistence store. </param>
        </member>
        <member name="M:OrderAPI.Consumers.CreateCartConsumer.Consume(MassTransit.ConsumeContext{Infrastructure.DTO.CartDTORabbitMQ})">
            <inheritdoc/>
        </member>
        <member name="T:OrderAPI.Consumers.OrderIsReceivedConsumer">
            <summary>
            Consumer of the message for create cart
            </summary>
        </member>
        <member name="F:OrderAPI.Consumers.OrderIsReceivedConsumer._orderService">
            <summary>
            Interface for class providing the APIs for managing order in a persistence store.
            </summary>
        </member>
        <member name="M:OrderAPI.Consumers.OrderIsReceivedConsumer.#ctor(OrderAPI.Services.Interfaces.IOrderService)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Consumers.CreateCartConsumer"/>.
            </summary>
            <param name="orderService"> Interface for class providing the APIs for managing order in a persistence store. </param>
        </member>
        <member name="M:OrderAPI.Consumers.OrderIsReceivedConsumer.Consume(MassTransit.ConsumeContext{Infrastructure.DTO.OrderIsReceivedDTORabbitMQ})">
            <inheritdoc/>
        </member>
        <member name="T:OrderAPI.Controllers.CartController">
            <summary>
            Provides the APIs for handling all the cart logic
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.CartController._unitOfWork">
            <summary>
            Repository group interface showing data context
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.CartController._cartService">
            <summary>
            Class providing the APIs for managing cart in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.CartController._productService">
            <summary>
            Class providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.CartController._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.#ctor(OrderAPI.UnitOfWork.Interfaces.IUnitOfWork,OrderAPI.Services.Interfaces.ICartService,OrderAPI.Services.Interfaces.ICartProductService,AutoMapper.IMapper)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Controllers.CartController"/>.
            </summary>
            <param name="unitOfWork"> Repository group interface showing data context </param>
            <param name="cartService"> Class providing the APIs for managing cart in a persistence store. </param>
            <param name="productService"> Class providing the APIs for managing cart product in a persistence store. </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.GetByUserId(System.Guid)">
            <summary>
            Get cart by user Id
            </summary>
            <param name="userId"> User Id </param>
            <returns> Task object containig the action result of getting cart </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Incorrect user Id </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Cart with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.AddProduct(OrderAPI.Models.DTO.Cart.CartProductDTORequest)">
            <summary>
            Add new product to cart. If product has already existed to cart, increase the number.
            </summary>
            <param name="model"> Cart product data transfer object as request </param>
            <returns> Task object containig the action result of adding product </returns>
            <response code="201"> Product added </response>
            <response code="400"> Bad request data </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Cart or product with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.QuantityChange(System.Guid,OrderAPI.Models.DTO.Cart.CartProductDTORequest)">
            <summary>
            Change of the product quantity in cart
            </summary>
            <param name="cartProductId"> Cart product Id </param>
            <param name="model"> Cart product data transfer object as request </param>
            <returns> Task object containig the action result of changing quantity of product in cart </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request data </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Cart or product with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.DeleteProduct(System.Guid,System.Guid)">
            <summary>
            Delete product from cart
            </summary>
            <param name="cartId"> Cart Id </param>
            <param name="cartProductId"> Cart product Id </param>
            <returns> Task object containig the action result of removing product from cart </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request data </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Cart or product with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.CartController.Clear(System.Guid)">
            <summary>
            Clear of the cart
            </summary>
            <param name="cartId"> Cart Id </param>
            <returns> Task object containing the action result of clearing of the cart </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Incorrect cart Id </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Cart with this Id wasn't founded </response>
        </member>
        <member name="T:OrderAPI.Controllers.OrderController">
            <summary>
            Provides the APIs for handling all the order logic
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.OrderController._unitOfWork">
            <summary>
            Repository group interface showing data context
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.OrderController._orderService">
            <summary>
            Сlass providing the APIs for managing cart in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Controllers.OrderController._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.#ctor(OrderAPI.Services.Interfaces.IOrderService,OrderAPI.UnitOfWork.Interfaces.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Controllers.OrderController"/>.
            </summary>
            <param name="unitOfWork"> Repository group interface showing data context </param>
            <param name="orderService"> Сlass providing the APIs for managing cart in a persistence store. </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.GetAll">
            <summary>
            Get all orders
            </summary>
            <returns> Action result of getting all orders </returns>
            <response code="200"> Successful completion </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.GetById(System.Guid)">
            <summary>
            Get order by Id
            </summary>
            <param name="id"> Order Id </param>
            <returns> Action result of getting order by Id </returns>
            <response code="200"> Successful completion </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.GetByFilter(OrderAPI.Models.DTO.Order.OrderFilterDTORequest)">
            <summary>
            Get orders by filters
            </summary>
            <param name="filter"> Orders filters </param>
            <returns> Action result of getting order by filters </returns>
            <response code="200"> Successful completion </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.Create(OrderAPI.Models.DTO.Order.OrderDTORequest)">
            <summary>
            Create order
            </summary>
            <param name="model"> The order data transfer object as request </param>
            <returns> Task object containing the action result of creating order </returns>
            <response code="201"> Order created </response>
            <response code="400"> Order is empty </response>
            <response code="401"> Unauthorized </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.Update(System.Guid,OrderAPI.Models.DTO.Order.OrderDTORequest)">
            <summary>
            Update order data
            </summary>
            <param name="id"> Order Id </param>
            <param name="model"> The order data transfer object as request </param>
            <returns> Task object containing the action result of updating order data </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Order is empty </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.IsReady(System.Guid)">
            <summary>
            Order is ready
            </summary>
            <param name="id"> Order Id </param>
            <returns> Task object containing the action result </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.IsReceived(System.Guid)">
            <summary>
            Order is recieved
            </summary>
            <param name="id"> Order Id </param>
            <returns> Task object containing the action result </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.Cancel(System.Guid)">
            <summary>
            Cansel order
            </summary>
            <param name="id"> Order Id </param>
            <returns> Task object containing the action result of canseling order </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="M:OrderAPI.Controllers.OrderController.IsPaymented(System.Guid)">
            <summary>
            Payment order
            </summary>
            <param name="id"> Order Id </param>
            <returns> Task object containing the action result of paymenting order </returns>
            <response code="200"> Successful completion </response>
            <response code="400"> Bad request </response>
            <response code="401"> Unauthorized </response>
            <response code="404"> Order with this Id wasn't founded </response>
        </member>
        <member name="T:OrderAPI.DataBase.Context">
            <summary>
            Class for the Entity Framework database context
            </summary>
        </member>
        <member name="M:OrderAPI.DataBase.Context.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{OrderAPI.DataBase.Context})">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.DataBase.Context"/>.
            </summary>
            <param name="options"> <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> </param>
        </member>
        <member name="T:OrderAPI.DataBase.Entities.BaseEntity">
            <summary>
            Base database entity
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.BaseEntity.Id">
            <summary>
            Entity object Id
            </summary>
        </member>
        <member name="T:OrderAPI.DataBase.Entities.Cart">
            <summary>
            Cart
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Cart.Id">
            <summary>
            Cart Id
            Generated during user registration (UserId == CartId)
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Cart.CartProducts">
            <summary>
            Cart products list
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Cart.TotalValue">
            <summary>
            Total value of all cart products
            </summary>
        </member>
        <member name="T:OrderAPI.DataBase.Entities.CartProduct">
            <summary>
            Cart product
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.CartProduct.ProductId">
            <summary>
            Product Id
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.CartProduct.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.CartProduct.TotalValue">
            <summary>
            Total value of all cart products of single type
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.CartProduct.CartId">
            <summary>
            Cart Id
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.CartProduct.Cart">
            <summary>
            Cart
            </summary>
        </member>
        <member name="T:OrderAPI.DataBase.Entities.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.OrderProducts">
            <summary>
            The order products list
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.TotalValue">
            <summary>
            Total value of the order
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.IsReady">
            <summary>
            Order is ready?
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.IsReceived">
            <summary>
            Order is received?
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.IsCanceled">
            <summary>
            Order is canceled?
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.IsPaymented">
            <summary>
            Order is paymented?
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.Order.DateTime">
            <summary>
            Date time of creation of the order
            </summary>
        </member>
        <member name="T:OrderAPI.DataBase.Entities.OrderProduct">
            <summary>
            The order product
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.Id">
            <summary>
            The order product Id
            Cart product Id = the order product Id
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.ProductId">
            <summary>
            Id of the product corresponding ofvthe product from catalog
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.Quantity">
            <summary>
            Quantity of the order products
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.TotalValue">
            <summary>
            Total value of all order products
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.OrderId">
            <summary>
            The order Id
            </summary>
        </member>
        <member name="P:OrderAPI.DataBase.Entities.OrderProduct.Order">
            <summary>
            The order
            </summary>
        </member>
        <member name="T:OrderAPI.Exceptions.EmptyOrderException">
            <summary>
            The exception that is throw when a empty order error is detected
            </summary>
        </member>
        <member name="M:OrderAPI.Exceptions.EmptyOrderException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.EmptyOrderException"/>.
            </summary>
        </member>
        <member name="M:OrderAPI.Exceptions.EmptyOrderException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.EmptyOrderException"/>.
            </summary>
            <param name="message"> Message </param>
        </member>
        <member name="M:OrderAPI.Exceptions.EmptyOrderException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.EmptyOrderException"/>.
            </summary>
            <param name="message"> Message </param>
            <param name="paramName"> Param name </param>
        </member>
        <member name="T:OrderAPI.Exceptions.OrderStatusException">
            <summary>
            The exception that is throw when a order status error is detected
            </summary>
        </member>
        <member name="M:OrderAPI.Exceptions.OrderStatusException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.OrderStatusException"/>.
            </summary>
        </member>
        <member name="M:OrderAPI.Exceptions.OrderStatusException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.OrderStatusException"/>.
            </summary>
            <param name="message"> Message </param>
        </member>
        <member name="M:OrderAPI.Exceptions.OrderStatusException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Exceptions.OrderStatusException"/>.
            </summary>
            <param name="message"> Message </param>
            <param name="paramName"> Param name </param>
        </member>
        <member name="T:OrderAPI.Helpers.AuthorizeHandler">
            <summary>
            User authorization handler
            </summary>
        </member>
        <member name="M:OrderAPI.Helpers.AuthorizeHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement)">
            <inheritdoc/>
        </member>
        <member name="T:OrderAPI.Helpers.CustomAuthenticateMiddleware">
            <summary>
            Middleware adding user in context items
            </summary>
        </member>
        <member name="F:OrderAPI.Helpers.CustomAuthenticateMiddleware._next">
            <summary>
            Request delegate
            </summary>
        </member>
        <member name="M:OrderAPI.Helpers.CustomAuthenticateMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:OrderAPI.Helpers.CustomAuthenticateMiddleware"/>.
            </summary>
            <param name="next">The next item in the middleware pipeline.</param>
        </member>
        <member name="M:OrderAPI.Helpers.CustomAuthenticateMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware performing authentication.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
        </member>
        <member name="T:OrderAPI.Helpers.MappingProfile">
            <summary>
            Class for models mapping
            </summary>
        </member>
        <member name="M:OrderAPI.Helpers.MappingProfile.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:OrderAPI.Helpers.MappingProfile"/>.
            </summary>
        </member>
        <member name="T:OrderAPI.Migrations.Initial">
            <inheritdoc />
        </member>
        <member name="M:OrderAPI.Migrations.Initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:OrderAPI.Migrations.Initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:OrderAPI.Migrations.Initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:OrderAPI.Models.CartDomainModel">
            <summary>
            Cart domain model
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartDomainModel.Id">
            <summary>
            Cart Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartDomainModel.CartProducts">
            <summary>
            Cart products list
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartDomainModel.TotalValue">
            <summary>
            Total value of all cart products
            </summary>
        </member>
        <member name="M:OrderAPI.Models.CartDomainModel.ComputeTotalValue">
            <summary>
            Compute total value of all cart products
            </summary>
        </member>
        <member name="M:OrderAPI.Models.CartDomainModel.Clear">
            <summary>
            Clear cart
            </summary>
        </member>
        <member name="T:OrderAPI.Models.CartProductDomainModel">
            <summary>
            Cart product domain model
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.Id">
            <summary>
            Cart product Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.ProductId">
            <summary>
            Id of product from catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.Product">
            <summary>
            Product domain model corresponding to the product with catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.Quantity">
            <summary>
            Quantity of all cart products of single type
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.TotalValue">
            <summary>
            Total value of all cart product of single type
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.CartId">
            <summary>
            Cart Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.CartProductDomainModel.Cart">
            <summary>
            Cart
            </summary>
        </member>
        <member name="M:OrderAPI.Models.CartProductDomainModel.ComputeTotalValue">
            <summary>
            Compute total value of all cart porducts of single type
            </summary>
        </member>
        <member name="M:OrderAPI.Models.CartProductDomainModel.ComputeTotalValue(System.Double)">
            <summary>
            Compute total value of all cart porducts of single type
            </summary>
            <param name="price"> Price of the single cart product </param>
        </member>
        <member name="T:OrderAPI.Models.DTO.Cart.CartDTOResponse">
            <summary>
            Cart data transfer object as response
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartDTOResponse.Id">
            <summary>
            Cart Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartDTOResponse.CartProducts">
            <summary>
            Cart products
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartDTOResponse.TotalValue">
            <summary>
            Total value products in cart
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Cart.CartProductDTORequest">
            <summary>
            Cart product data transfer object as request
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTORequest.ProductId">
            <summary>
            Product Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTORequest.Quantity">
            <summary>
            The quantity products in the cart that match a product from the catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTORequest.CartId">
            <summary>
            Cart Id
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Cart.CartProductDTOResponse">
            <summary>
            Cart product data transfer object as response
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTOResponse.Id">
            <summary>
            Cart product Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTOResponse.ProductId">
            <summary>
            Product Id from catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTOResponse.Product">
            <summary>
            Product from catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTOResponse.Quantity">
            <summary>
            The quantity products in the cart that match a product from the catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.CartProductDTOResponse.TotalValue">
            <summary>
            The total value products in the cart that match a product from the catalog
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Cart.ProductDTO">
            <summary>
            Product data transfer object
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.ProductDTO.Name">
            <summary>
            Product name
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Cart.ProductDTO.Price">
            <summary>
            Product price
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.AddressDTO">
            <summary>
            Address data transfer object
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.AddressDTO.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.AddressDTO.Street">
            <summary>
            Street
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.AddressDTO.NumberOfHome">
            <summary>
            Number of home
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.AddressDTO.ApartmentNumber">
            <summary>
            Apartment number
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.AddressDTO.PostalCode">
            <summary>
            Postal code
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderCartProductDTORequest">
            <summary>
            Stores the product Id from the cart for the order creation request
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderCartProductDTORequest.Id">
            <summary>
            Cart product id
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderDTORequest">
            <summary>
            The order data transfer object as request
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTORequest.UserId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTORequest.CartProducts">
            <summary>
            Cart product IDs for creation the order
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTORequest.Delivery">
            <summary>
            flag, true if delivery is needed, false if delivery isn't needed
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTORequest.Address">
            <summary>
            Delivery address
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderDTOResponse">
            <summary>
            Data transfer object of order as response
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.Id">
            <summary>
            Order Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.UserId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.OrderProducts">
            <summary>
            Order products list
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.IsReady">
            <summary>
            Order is ready?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.IsReceived">
            <summary>
            Order is received?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.IsCanceled">
            <summary>
            Order is canceled?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderDTOResponse.IsPaymented">
            <summary>
            Order is paymented?
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderFilterDTORequest">
            <summary>
            Orders filters
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderFilterDTORequest.UserId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderFilterDTORequest.IsReady">
            <summary>
            Order is ready?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderFilterDTORequest.IsReceived">
            <summary>
            Order is received?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderFilterDTORequest.IsCanceled">
            <summary>
            Order is canseled?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderFilterDTORequest.IsPaymented">
            <summary>
            Order is paymented?
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderListDTOResponse">
            <summary>
            Orders list as response
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.Id">
            <summary>
            Oredr Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.UserId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.IsReady">
            <summary>
            Order is ready?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.IsReceived">
            <summary>
            Order is received?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.IsCanceled">
            <summary>
            Oredr is canceled?
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderListDTOResponse.IsPaymented">
            <summary>
            Order is paymented?
            </summary>
        </member>
        <member name="T:OrderAPI.Models.DTO.Order.OrderProductDTO">
            <summary>
            The order product data transfer object
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderProductDTO.Id">
            <summary>
            Order Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderProductDTO.ProductId">
            <summary>
            Product Id
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderProductDTO.Quantity">
            <summary>
            Quantity of order products that match a product from the catalog 
            </summary>
        </member>
        <member name="P:OrderAPI.Models.DTO.Order.OrderProductDTO.TotalValue">
            <summary>
            Total value of order products that match a product from the catalog
            </summary>
        </member>
        <member name="T:OrderAPI.Models.Enums.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="F:OrderAPI.Models.Enums.Role.Admin">
            <summary>
            Administrator
            </summary>
        </member>
        <member name="F:OrderAPI.Models.Enums.Role.Buyer">
            <summary>
            Buyer
            </summary>
        </member>
        <member name="F:OrderAPI.Models.Enums.Role.Salesman">
            <summary>
            Salesman
            </summary>
        </member>
        <member name="F:OrderAPI.Models.Enums.Role.Courier">
            <summary>
            Courier
            </summary>
        </member>
        <member name="T:OrderAPI.Models.ProductDomainModel">
            <summary>
            Product domain model corresponding of the product from catalog
            </summary>
        </member>
        <member name="P:OrderAPI.Models.ProductDomainModel.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:OrderAPI.Models.ProductDomainModel.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:OrderAPI.Services.CartProductService">
            <summary>
            Сlass providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartProductService._db">
            <summary>
            Repository group interface showing data context
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartProductService._bus">
            <summary>
            <see cref="T:MassTransit.IBusControl"/>.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartProductService._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartProductService._disposed">
            <summary>
            True, if object is disposed
            False, if object isn't disposed
            </summary>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.#ctor(OrderAPI.UnitOfWork.Interfaces.IUnitOfWork,MassTransit.IBusControl,AutoMapper.IMapper)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Services.CartProductService"/>.
            </summary>
            <param name="unitOfWork"> Repository group interface showing data context </param>
            <param name="bus"> <see cref="T:MassTransit.IBusControl"/> </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.Create(OrderAPI.Models.CartProductDomainModel)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.Delete(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.Update(OrderAPI.Models.CartProductDomainModel)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.ThrowIfDisposed">
            <summary>
            Throws if this class has been disposed.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.CartProductService.GetProductFromCatalog(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:OrderAPI.Services.CartService">
            <summary>
            Сlass providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartService._db">
            <summary>
            Repository group interface showing data context
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartService._bus">
            <summary>
            <see cref="T:MassTransit.IBusControl"/>.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartService._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartService._cartProductService">
            <summary>
            Interface for class providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.CartService._disposed">
            <summary>
            True, if object is disposed
            False, if object isn't disposed
            </summary>
        </member>
        <member name="M:OrderAPI.Services.CartService.#ctor(OrderAPI.UnitOfWork.Interfaces.IUnitOfWork,MassTransit.IBusControl,AutoMapper.IMapper,OrderAPI.Services.Interfaces.ICartProductService)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Services.CartProductService"/>.
            </summary>
            <param name="unitOfWork"> Repository group interface showing data context </param>
            <param name="bus"> <see cref="T:MassTransit.IBusControl"/> </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
            <param name="cartProductService"> Interface for class providing the APIs for managing cart product in a persistence store </param>
        </member>
        <member name="M:OrderAPI.Services.CartService.GetById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.Create(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.ComputeTotalValue(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.Clear(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.CartService.ThrowIfDisposed">
            <summary>
            Throws if this class has been disposed.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.CartService.Check(OrderAPI.DataBase.Entities.Cart)">
            <summary>
            Checks the relevance of products and returns a new cart
            </summary>
            <param name="cart"> Cart objcet </param>
            <returns> Task containing cart object with actualy product </returns>
        </member>
        <member name="T:OrderAPI.Services.Interfaces.ICartProductService">
            <summary>
            Interface for class providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartProductService.Create(OrderAPI.Models.CartProductDomainModel)">
            <summary>
            Create a new cart product
            </summary>
            <param name="cartProduct"> New cart product </param>
            <returns> Task object containing of created cart product </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartProductService.Update(OrderAPI.Models.CartProductDomainModel)">
            <summary>
            Update cart product
            </summary>
            <param name="cartProduct"> Cart product </param>
            <returns> Task object containing of updated cart product </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartProductService.Delete(System.Guid)">
            <summary>
            Delete cart product
            </summary>
            <param name="id"></param>
            <returns> Task object </returns>
        </member>
        <member name="T:OrderAPI.Services.Interfaces.ICartService">
            <summary>
            Interface for class providing the APIs for managing cart in a persistence store.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartService.GetById(System.Guid)">
            <summary>
            Get cart by Id
            </summary>
            <param name="id"> Cart id </param>
            <returns> Task object containing of the cart </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartService.Create(System.Guid)">
            <summary>
            Create a new cart
            </summary>
            <param name="id"> New cart Id </param>
            <returns> Task object containing of created cart </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartService.ComputeTotalValue(System.Guid)">
            <summary>
            Compute total value of cart products
            </summary>
            <param name="id"> Cart Id </param>
            <returns> Task object containing of the cart </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.ICartService.Clear(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns> Task object containing of the empty cart </returns>
        </member>
        <member name="T:OrderAPI.Services.Interfaces.IOrderService">
            <summary>
            Interface for class providing the APIs for managing cart in a persistence store.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.GetAll">
            <summary>
            Get all orders
            </summary>
            <returns> Orders list </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.GetById(System.Guid)">
            <summary>
            Get order by Id
            </summary>
            <param name="id"> The order Id </param>
            <returns> Order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.GetByFilter(OrderAPI.Models.DTO.Order.OrderFilterDTORequest)">
            <summary>
            Get order by filters
            </summary>
            <param name="filter"> Filters </param>
            <returns> Orders list </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.Create(OrderAPI.DataBase.Entities.Order)">
            <summary>
            Create a new order
            </summary>
            <param name="order"> The new order </param>
            <returns> Task object contaning of created order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.Update(OrderAPI.DataBase.Entities.Order)">
            <summary>
            Update order
            </summary>
            <param name="order"> The order </param>
            <returns> Task object containing of updated order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.IsReady(System.Guid)">
            <summary>
            The order is ready 
            </summary>
            <param name="id"> The order Id </param>
            <returns> Task object containing order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.IsReceived(System.Guid)">
            <summary>
            The order is received
            </summary>
            <param name="id"> The order Id </param>
            <returns> Task object containing order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.Cancel(System.Guid)">
            <summary>
            Cansel the order
            </summary>
            <param name="id"> The order Id </param>
            <returns> Task object containing order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.IsPaymented(System.Guid)">
            <summary>
            Pay the order
            </summary>
            <param name="id"> The order Id </param>
            <returns> Task object containing order </returns>
        </member>
        <member name="M:OrderAPI.Services.Interfaces.IOrderService.CreateDelivery(OrderAPI.DataBase.Entities.Order,OrderAPI.Models.DTO.AddressDTO)">
            <summary>
            Send message to DeliveryAPI service for creating delivery
            </summary>
            <param name="order"> The order </param>
            <param name="address"> Delivery address </param>
            <returns> Task object </returns>
        </member>
        <member name="T:OrderAPI.Services.OrderService">
            <summary>
            Сlass providing the APIs for managing cart product in a persistence store.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.OrderService._mapper">
            <summary>
            Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping
            </summary>
        </member>
        <member name="F:OrderAPI.Services.OrderService._db">
            <summary>
            Repository group interface showing data context
            </summary>
        </member>
        <member name="F:OrderAPI.Services.OrderService._configuration">
            <summary>
            Configurations of application
            </summary>
        </member>
        <member name="F:OrderAPI.Services.OrderService._bus">
            <summary>
            <see cref="T:MassTransit.IBusControl"/>.
            </summary>
        </member>
        <member name="F:OrderAPI.Services.OrderService._disposed">
            <summary>
            True, if object is disposed
            False, if object isn't disposed
            </summary>
        </member>
        <member name="M:OrderAPI.Services.OrderService.#ctor(OrderAPI.UnitOfWork.Interfaces.IUnitOfWork,AutoMapper.IMapper,Microsoft.Extensions.Configuration.IConfiguration,MassTransit.IBusControl)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.Services.OrderService"/>.
            </summary>
            <param name="unitOfWork"> Repository group interface showing data context </param>
            <param name="mapper"> Object of class <see cref="T:AutoMapper.IMapper"/> for models mapping </param>
            <param name="configuration"> Configurations of application </param>
            <param name="bus"> <see cref="T:MassTransit.IBusControl"/>. </param>
        </member>
        <member name="M:OrderAPI.Services.OrderService.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.GetById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.GetByFilter(OrderAPI.Models.DTO.Order.OrderFilterDTORequest)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.Create(OrderAPI.DataBase.Entities.Order)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.Update(OrderAPI.DataBase.Entities.Order)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.IsReady(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.IsReceived(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.Cancel(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.IsPaymented(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.CreateDelivery(OrderAPI.DataBase.Entities.Order,OrderAPI.Models.DTO.AddressDTO)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.Services.OrderService.ThrowIfDisposed">
            <summary>
            Throws if this class has been disposed.
            </summary>
        </member>
        <member name="M:OrderAPI.Services.OrderService.CancelDelivery(System.Guid)">
            <summary>
            Send of message about canceled of the order to DeleveryAPI service
            </summary>
            <param name="orderId"> Order Id </param>
            <returns> Task object </returns>
        </member>
        <member name="T:OrderAPI.UnitOfWork.CartProductRepository">
            <summary>
            The cart product repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.CartProductRepository.#ctor(OrderAPI.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.UnitOfWork.CartProductRepository"/>.
            </summary>
            <param name="context"> Database context </param>
        </member>
        <member name="T:OrderAPI.UnitOfWork.CartRepository">
            <summary>
            The cart cart repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.CartRepository.#ctor(OrderAPI.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.UnitOfWork.CartProductRepository"/>.
            </summary>
            <param name="context"> Database context </param>
        </member>
        <member name="T:OrderAPI.UnitOfWork.GenericRepository`1">
            <summary>
            The generic repository class containing methods for interaction with the database
            </summary>
            <typeparam name="TEntity"> Entity type </typeparam>
        </member>
        <member name="F:OrderAPI.UnitOfWork.GenericRepository`1._context">
            <summary>
            Database context
            </summary>
        </member>
        <member name="F:OrderAPI.UnitOfWork.GenericRepository`1._disposed">
            <summary>
            True, if object is disposed
            False, if object isn't disposed
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.#ctor(OrderAPI.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.UnitOfWork.GenericRepository`1"/>.
            </summary>
            <param name="context"> Database context </param>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.GetById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.GenericRepository`1.ThrowIfDisposed">
            <summary>
            Throws if this class has been disposed.
            </summary>
        </member>
        <member name="T:OrderAPI.UnitOfWork.Interfaces.ICartProductRepository">
            <summary>
            Interface for the cart product repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="T:OrderAPI.UnitOfWork.Interfaces.ICartRepository">
            <summary>
            Interface for the cart repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="T:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1">
            <summary>
            Interface for the generic repository class containing methods for interaction with the database
            </summary>
            <typeparam name="TEntity"> Entity type </typeparam>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.GetAll">
            <summary>
            Get all entity objects
            </summary>
            <returns> Query of entity objects </returns>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.GetById(System.Guid)">
            <summary>
            Get entity by Id
            </summary>
            <param name="Id"> Object Id </param>
            <returns> One entity object </returns>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Include data from another database table
            </summary>
            <param name="includeProperties"> Include properties </param>
            <returns> A new query with the released data included </returns>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.AddAsync(`0)">
            <summary>
            Create a new entity object
            </summary>
            <param name="entity"> New entity object </param>
            <returns> New entity object </returns>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.UpdateAsync(`0)">
            <summary>
            Update a entity object
            </summary>
            <param name="entity"> Entity object </param>
            <returns> Task object containing updated entity object </returns>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IGenericRepository`1.RemoveAsync(`0)">
            <summary>
            Remove entity object
            </summary>
            <param name="entity"> Entity object </param>
            <returns> Task object </returns>
        </member>
        <member name="T:OrderAPI.UnitOfWork.Interfaces.IOrderRepository">
            <summary>
            Interface for the order repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="T:OrderAPI.UnitOfWork.Interfaces.IUnitOfWork">
            <summary>
            An interface for class that implements the unit of work pattern
            and contains all entity repositories to create a single database context.
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.Interfaces.IUnitOfWork.Carts">
            <summary>
            Interface for the cart repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.Interfaces.IUnitOfWork.CartProducts">
            <summary>
            Interface for the cart product repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.Interfaces.IUnitOfWork.Orders">
            <summary>
            Interface for the order repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.Interfaces.IUnitOfWork.SaveChangesAsync">
            <summary>
            Save changes
            </summary>
            <returns> Task object </returns>
        </member>
        <member name="T:OrderAPI.UnitOfWork.OrderRepository">
            <summary>
            The cart order repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.OrderRepository.#ctor(OrderAPI.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.UnitOfWork.OrderRepository"/>.
            </summary>
            <param name="context"> Database context </param>
        </member>
        <member name="T:OrderAPI.UnitOfWork.UnitOfWork">
            <summary>
            The class that implements the unit of work pattern
            and contains all entity repositories to create a single database context.
            </summary>
        </member>
        <member name="F:OrderAPI.UnitOfWork.UnitOfWork._context">
            <summary>
            Database context
            </summary>
        </member>
        <member name="F:OrderAPI.UnitOfWork.UnitOfWork._disposed">
            <summary>
            True, if object is disposed
            False, if object isn't disposed
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.UnitOfWork.Carts">
            <summary>
            Interface for the cart repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.UnitOfWork.CartProducts">
            <summary>
            Interface for the cart product repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="P:OrderAPI.UnitOfWork.UnitOfWork.Orders">
            <summary>
            Interface for the order repository class containing methods for interaction with the database
            </summary>
        </member>
        <member name="M:OrderAPI.UnitOfWork.UnitOfWork.#ctor(OrderAPI.DataBase.Context)">
            <summary>
            Creates an instance of the <see cref="T:OrderAPI.UnitOfWork.UnitOfWork"/>.
            </summary>
            <param name="context"> Database context </param>
        </member>
        <member name="M:OrderAPI.UnitOfWork.UnitOfWork.SaveChangesAsync">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.UnitOfWork.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.UnitOfWork.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OrderAPI.UnitOfWork.UnitOfWork.ThrowIfDisposed">
            <summary>
            Throws if this class has been disposed.
            </summary>
        </member>
    </members>
</doc>
